{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { anecServices } from \"../services/anecdote\"; //const getId = () => (100000 * Math.random()).toFixed(0);\n\n/*\nconst asObject = (anecdote) => {\n  return {\n    content: anecdote,\n    id: getId(),\n    votes: 0,\n  };\n};\n*/\n\nexport const anecdoteSlice = createSlice({\n  name: \"anecdote\",\n  initialState: [],\n  reducers: {\n    /*\n    voting(state, action) {\n      const id = action.payload;\n      const anec = state.find((anec) => anec.id === id);\n      const changedAnec = { ...anec, votes: anec.votes + 1 };\n      return state.map((anec) => (anec.id === id ? changedAnec : anec));\n    },\n    */\n    addNewAnec(state, action) {\n      return state.concat(action.payload);\n    },\n\n    addAnecs(state, action) {\n      return action.payload;\n    }\n\n  }\n});\nexport const initializeAnec = () => {\n  return async (dispatch, getState) => {\n    const anecdotes = await anecServices.getAll();\n    dispatch(addAnecs(anecdotes));\n  };\n};\nexport const createAnec = anec => {\n  return async dispatch => {\n    const newAnec = await anecServices.saveAnec(anec);\n    console.log(newAnec);\n    dispatch(addNewAnec(newAnec));\n  };\n};\nexport const saveVote = id => {\n  return async (dispatch, getState) => {\n    const anecdotes = getState().anecdote;\n    const anec = anecdotes.find(anec => anec.id === id);\n    const votedAnec = { ...anec,\n      votes: anec.votes + 1\n    };\n    const votedAnecs = anecdotes.map(anec => anec.id === id ? votedAnec : anec);\n    const newAnecs = await anecServices.saveVote(votedAnecs);\n    dispatch(addAnecs(newAnecs));\n  };\n};\nexport const {\n  voting,\n  addNewAnec,\n  addAnecs\n} = anecdoteSlice.actions;","map":{"version":3,"sources":["/Users/le.viet/Part-6/redux-anecdotes-main/src/reducers/anecdoteReducer.js"],"names":["createSlice","anecServices","anecdoteSlice","name","initialState","reducers","addNewAnec","state","action","concat","payload","addAnecs","initializeAnec","dispatch","getState","anecdotes","getAll","createAnec","anec","newAnec","saveAnec","console","log","saveVote","id","anecdote","find","votedAnec","votes","votedAnecs","map","newAnecs","voting","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,YAAT,QAA6B,sBAA7B,C,CAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,aAAa,GAAGF,WAAW,CAAC;AACvCG,EAAAA,IAAI,EAAE,UADiC;AAEvCC,EAAAA,YAAY,EAAE,EAFyB;AAGvCC,EAAAA,QAAQ,EAAE;AACR;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AAEIC,IAAAA,UAAU,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACxB,aAAOD,KAAK,CAACE,MAAN,CAAaD,MAAM,CAACE,OAApB,CAAP;AACD,KAZO;;AAcRC,IAAAA,QAAQ,CAACJ,KAAD,EAAQC,MAAR,EAAgB;AACtB,aAAOA,MAAM,CAACE,OAAd;AACD;;AAhBO;AAH6B,CAAD,CAAjC;AAuBP,OAAO,MAAME,cAAc,GAAG,MAAM;AAClC,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnC,UAAMC,SAAS,GAAG,MAAMd,YAAY,CAACe,MAAb,EAAxB;AACAH,IAAAA,QAAQ,CAACF,QAAQ,CAACI,SAAD,CAAT,CAAR;AACD,GAHD;AAID,CALM;AAOP,OAAO,MAAME,UAAU,GAAIC,IAAD,IAAU;AAClC,SAAO,MAAOL,QAAP,IAAoB;AACzB,UAAMM,OAAO,GAAG,MAAMlB,YAAY,CAACmB,QAAb,CAAsBF,IAAtB,CAAtB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACAN,IAAAA,QAAQ,CAACP,UAAU,CAACa,OAAD,CAAX,CAAR;AACD,GAJD;AAKD,CANM;AAQP,OAAO,MAAMI,QAAQ,GAAIC,EAAD,IAAQ;AAC9B,SAAO,OAAOX,QAAP,EAAiBC,QAAjB,KAA8B;AACnC,UAAMC,SAAS,GAAGD,QAAQ,GAAGW,QAA7B;AACA,UAAMP,IAAI,GAAGH,SAAS,CAACW,IAAV,CAAgBR,IAAD,IAAUA,IAAI,CAACM,EAAL,KAAYA,EAArC,CAAb;AACA,UAAMG,SAAS,GAAG,EAAE,GAAGT,IAAL;AAAWU,MAAAA,KAAK,EAAEV,IAAI,CAACU,KAAL,GAAa;AAA/B,KAAlB;AACA,UAAMC,UAAU,GAAGd,SAAS,CAACe,GAAV,CAAeZ,IAAD,IAC/BA,IAAI,CAACM,EAAL,KAAYA,EAAZ,GAAiBG,SAAjB,GAA6BT,IADZ,CAAnB;AAGA,UAAMa,QAAQ,GAAG,MAAM9B,YAAY,CAACsB,QAAb,CAAsBM,UAAtB,CAAvB;AACAhB,IAAAA,QAAQ,CAACF,QAAQ,CAACoB,QAAD,CAAT,CAAR;AACD,GATD;AAUD,CAXM;AAaP,OAAO,MAAM;AAAEC,EAAAA,MAAF;AAAU1B,EAAAA,UAAV;AAAsBK,EAAAA;AAAtB,IAAmCT,aAAa,CAAC+B,OAAvD","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { anecServices } from \"../services/anecdote\";\n\n//const getId = () => (100000 * Math.random()).toFixed(0);\n\n/*\nconst asObject = (anecdote) => {\n  return {\n    content: anecdote,\n    id: getId(),\n    votes: 0,\n  };\n};\n*/\n\nexport const anecdoteSlice = createSlice({\n  name: \"anecdote\",\n  initialState: [],\n  reducers: {\n    /*\n    voting(state, action) {\n      const id = action.payload;\n      const anec = state.find((anec) => anec.id === id);\n      const changedAnec = { ...anec, votes: anec.votes + 1 };\n      return state.map((anec) => (anec.id === id ? changedAnec : anec));\n    },\n    */\n\n    addNewAnec(state, action) {\n      return state.concat(action.payload);\n    },\n\n    addAnecs(state, action) {\n      return action.payload;\n    },\n  },\n});\n\nexport const initializeAnec = () => {\n  return async (dispatch, getState) => {\n    const anecdotes = await anecServices.getAll();\n    dispatch(addAnecs(anecdotes));\n  };\n};\n\nexport const createAnec = (anec) => {\n  return async (dispatch) => {\n    const newAnec = await anecServices.saveAnec(anec);\n    console.log(newAnec);\n    dispatch(addNewAnec(newAnec));\n  };\n};\n\nexport const saveVote = (id) => {\n  return async (dispatch, getState) => {\n    const anecdotes = getState().anecdote;\n    const anec = anecdotes.find((anec) => anec.id === id);\n    const votedAnec = { ...anec, votes: anec.votes + 1 };\n    const votedAnecs = anecdotes.map((anec) =>\n      anec.id === id ? votedAnec : anec\n    );\n    const newAnecs = await anecServices.saveVote(votedAnecs);\n    dispatch(addAnecs(newAnecs));\n  };\n};\n\nexport const { voting, addNewAnec, addAnecs } = anecdoteSlice.actions;\n"]},"metadata":{},"sourceType":"module"}