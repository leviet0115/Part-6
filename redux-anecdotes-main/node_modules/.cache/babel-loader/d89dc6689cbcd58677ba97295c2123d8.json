{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { anecServices } from \"../services/anecdote\"; //const getId = () => (100000 * Math.random()).toFixed(0);\n\nconst asObject = anecdote => {\n  return {\n    content: anecdote,\n    votes: 0\n  };\n};\n\nexport const anecdoteSlice = createSlice({\n  name: \"anecdote\",\n  initialState: [],\n  reducers: {\n    updateAnec(state, action) {\n      const newAnec = action.payload;\n      return state.map(anec => anec.id === newAnec.id ? newAnec : anec);\n    },\n\n    addNewAnec(state, action) {\n      return state.concat(action.payload);\n    },\n\n    addAnecs(state, action) {\n      return action.payload;\n      s;\n    }\n\n  }\n});\nexport const initializeAnec = () => {\n  return async (dispatch, getState) => {\n    const anecdotes = await anecServices.getAll();\n    dispatch(addAnecs(anecdotes));\n  };\n};\nexport const createAnec = anec => {\n  return async dispatch => {\n    const newAnec = await anecServices.saveAnec(asObject(anec));\n    console.log(newAnec);\n    dispatch(addNewAnec(newAnec));\n  };\n};\nexport const saveVote = id => {\n  return async (dispatch, getState) => {\n    const anecdotes = getState().anecdote;\n    const anec = anecdotes.find(anec => anec.id === id);\n    const changedAnec = { ...anec,\n      votes: anec.votes + 1\n    };\n    const res = await anecServices.saveVote(id, changedAnec);\n    dispatch(updateAnec(res));\n  };\n};\nexport const {\n  voting,\n  addNewAnec,\n  addAnecs\n} = anecdoteSlice.actions;","map":{"version":3,"sources":["/Users/le.viet/Part-6/redux-anecdotes-main/src/reducers/anecdoteReducer.js"],"names":["createSlice","anecServices","asObject","anecdote","content","votes","anecdoteSlice","name","initialState","reducers","updateAnec","state","action","newAnec","payload","map","anec","id","addNewAnec","concat","addAnecs","s","initializeAnec","dispatch","getState","anecdotes","getAll","createAnec","saveAnec","console","log","saveVote","find","changedAnec","res","voting","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,YAAT,QAA6B,sBAA7B,C,CAEA;;AAEA,MAAMC,QAAQ,GAAIC,QAAD,IAAc;AAC7B,SAAO;AACLC,IAAAA,OAAO,EAAED,QADJ;AAELE,IAAAA,KAAK,EAAE;AAFF,GAAP;AAID,CALD;;AAOA,OAAO,MAAMC,aAAa,GAAGN,WAAW,CAAC;AACvCO,EAAAA,IAAI,EAAE,UADiC;AAEvCC,EAAAA,YAAY,EAAE,EAFyB;AAGvCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACxB,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB;AACA,aAAOH,KAAK,CAACI,GAAN,CAAWC,IAAD,IAAWA,IAAI,CAACC,EAAL,KAAYJ,OAAO,CAACI,EAApB,GAAyBJ,OAAzB,GAAmCG,IAAxD,CAAP;AACD,KAJO;;AAMRE,IAAAA,UAAU,CAACP,KAAD,EAAQC,MAAR,EAAgB;AACxB,aAAOD,KAAK,CAACQ,MAAN,CAAaP,MAAM,CAACE,OAApB,CAAP;AACD,KARO;;AAURM,IAAAA,QAAQ,CAACT,KAAD,EAAQC,MAAR,EAAgB;AACtB,aAAOA,MAAM,CAACE,OAAd;AACAO,MAAAA,CAAC;AACF;;AAbO;AAH6B,CAAD,CAAjC;AAoBP,OAAO,MAAMC,cAAc,GAAG,MAAM;AAClC,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnC,UAAMC,SAAS,GAAG,MAAMxB,YAAY,CAACyB,MAAb,EAAxB;AACAH,IAAAA,QAAQ,CAACH,QAAQ,CAACK,SAAD,CAAT,CAAR;AACD,GAHD;AAID,CALM;AAOP,OAAO,MAAME,UAAU,GAAIX,IAAD,IAAU;AAClC,SAAO,MAAOO,QAAP,IAAoB;AACzB,UAAMV,OAAO,GAAG,MAAMZ,YAAY,CAAC2B,QAAb,CAAsB1B,QAAQ,CAACc,IAAD,CAA9B,CAAtB;AACAa,IAAAA,OAAO,CAACC,GAAR,CAAYjB,OAAZ;AACAU,IAAAA,QAAQ,CAACL,UAAU,CAACL,OAAD,CAAX,CAAR;AACD,GAJD;AAKD,CANM;AAQP,OAAO,MAAMkB,QAAQ,GAAId,EAAD,IAAQ;AAC9B,SAAO,OAAOM,QAAP,EAAiBC,QAAjB,KAA8B;AACnC,UAAMC,SAAS,GAAGD,QAAQ,GAAGrB,QAA7B;AACA,UAAMa,IAAI,GAAGS,SAAS,CAACO,IAAV,CAAgBhB,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAArC,CAAb;AACA,UAAMgB,WAAW,GAAG,EAAE,GAAGjB,IAAL;AAAWX,MAAAA,KAAK,EAAEW,IAAI,CAACX,KAAL,GAAa;AAA/B,KAApB;AACA,UAAM6B,GAAG,GAAG,MAAMjC,YAAY,CAAC8B,QAAb,CAAsBd,EAAtB,EAA0BgB,WAA1B,CAAlB;AACAV,IAAAA,QAAQ,CAACb,UAAU,CAACwB,GAAD,CAAX,CAAR;AACD,GAND;AAOD,CARM;AAUP,OAAO,MAAM;AAAEC,EAAAA,MAAF;AAAUjB,EAAAA,UAAV;AAAsBE,EAAAA;AAAtB,IAAmCd,aAAa,CAAC8B,OAAvD","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { anecServices } from \"../services/anecdote\";\n\n//const getId = () => (100000 * Math.random()).toFixed(0);\n\nconst asObject = (anecdote) => {\n  return {\n    content: anecdote,\n    votes: 0,\n  };\n};\n\nexport const anecdoteSlice = createSlice({\n  name: \"anecdote\",\n  initialState: [],\n  reducers: {\n    updateAnec(state, action) {\n      const newAnec = action.payload;\n      return state.map((anec) => (anec.id === newAnec.id ? newAnec : anec));\n    },\n\n    addNewAnec(state, action) {\n      return state.concat(action.payload);\n    },\n\n    addAnecs(state, action) {\n      return action.payload;\n      s;\n    },\n  },\n});\n\nexport const initializeAnec = () => {\n  return async (dispatch, getState) => {\n    const anecdotes = await anecServices.getAll();\n    dispatch(addAnecs(anecdotes));\n  };\n};\n\nexport const createAnec = (anec) => {\n  return async (dispatch) => {\n    const newAnec = await anecServices.saveAnec(asObject(anec));\n    console.log(newAnec);\n    dispatch(addNewAnec(newAnec));\n  };\n};\n\nexport const saveVote = (id) => {\n  return async (dispatch, getState) => {\n    const anecdotes = getState().anecdote;\n    const anec = anecdotes.find((anec) => anec.id === id);\n    const changedAnec = { ...anec, votes: anec.votes + 1 };\n    const res = await anecServices.saveVote(id, changedAnec);\n    dispatch(updateAnec(res));\n  };\n};\n\nexport const { voting, addNewAnec, addAnecs } = anecdoteSlice.actions;\n"]},"metadata":{},"sourceType":"module"}